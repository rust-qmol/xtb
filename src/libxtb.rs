/* automatically generated by rust-bindgen 0.65.1 */

pub const XTB_API_VERSION: u32 = 10000;
pub const XTB_VERSION_6_3_0: u32 = 1;
pub const XTB_VERSION_6_3_1: u32 = 1;
pub const XTB_VERSION_6_3_2: u32 = 1;
pub const XTB_VERSION_6_3_3: u32 = 1;
pub const XTB_VERBOSITY_FULL: u32 = 2;
pub const XTB_VERBOSITY_MINIMAL: u32 = 1;
pub const XTB_VERBOSITY_MUTED: u32 = 0;
#[repr(C)]
pub struct _xtb_TEnvironment {
    _unused: [u8; 0],
}
#[doc = " Calculation environment class"]
pub type xtb_TEnvironment = *mut _xtb_TEnvironment;
#[repr(C)]
pub struct _xtb_TMolecule {
    _unused: [u8; 0],
}
#[doc = " Molecular structure data class"]
pub type xtb_TMolecule = *mut _xtb_TMolecule;
#[repr(C)]
pub struct _xtb_TCalculator {
    _unused: [u8; 0],
}
#[doc = " Single point calculator class"]
pub type xtb_TCalculator = *mut _xtb_TCalculator;
#[repr(C)]
pub struct _xtb_TResults {
    _unused: [u8; 0],
}
#[doc = " Single point results class"]
pub type xtb_TResults = *mut _xtb_TResults;
extern "C" {
    #[doc = " Returns API version as 10000 * major + 100 * minor + 1 * patch"]
    pub fn xtb_getAPIVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create new xtb calculation environment object"]
    pub fn xtb_newEnvironment() -> xtb_TEnvironment;
}
extern "C" {
    #[doc = " Delete a xtb calculation environment object"]
    pub fn xtb_delEnvironment(arg1: *mut xtb_TEnvironment);
}
extern "C" {
    #[doc = " Check current status of calculation environment"]
    pub fn xtb_checkEnvironment(arg1: xtb_TEnvironment) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Show and empty error stack"]
    pub fn xtb_showEnvironment(arg1: xtb_TEnvironment, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Return and empty error stack"]
    pub fn xtb_getError(
        arg1: xtb_TEnvironment,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Bind output from this environment"]
    pub fn xtb_setOutput(arg1: xtb_TEnvironment, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Release output unit from this environment"]
    pub fn xtb_releaseOutput(arg1: xtb_TEnvironment);
}
extern "C" {
    #[doc = " Set verbosity of calculation output"]
    pub fn xtb_setVerbosity(arg1: xtb_TEnvironment, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Create new molecular structure data (quantities in Bohr)"]
    pub fn xtb_newMolecule(
        arg1: xtb_TEnvironment,
        arg2: *const ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_int,
        arg4: *const f64,
        arg5: *const f64,
        arg6: *const ::std::os::raw::c_int,
        arg7: *const f64,
        arg8: *const bool,
    ) -> xtb_TMolecule;
}
extern "C" {
    #[doc = " Delete molecular structure data"]
    pub fn xtb_delMolecule(arg1: *mut xtb_TMolecule);
}
extern "C" {
    #[doc = " Update coordinates and lattice parameters (quantities in Bohr)"]
    pub fn xtb_updateMolecule(
        arg1: xtb_TEnvironment,
        arg2: xtb_TMolecule,
        arg3: *const f64,
        arg4: *const f64,
    );
}
extern "C" {
    #[doc = " Create new calculator object"]
    pub fn xtb_newCalculator() -> xtb_TCalculator;
}
extern "C" {
    #[doc = " Delete calculator object"]
    pub fn xtb_delCalculator(arg1: *mut xtb_TCalculator);
}
extern "C" {
    #[doc = " Load GFN0-xTB calculator"]
    pub fn xtb_loadGFN0xTB(
        arg1: xtb_TEnvironment,
        arg2: xtb_TMolecule,
        arg3: xtb_TCalculator,
        arg4: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " Load GFN1-xTB calculator"]
    pub fn xtb_loadGFN1xTB(
        arg1: xtb_TEnvironment,
        arg2: xtb_TMolecule,
        arg3: xtb_TCalculator,
        arg4: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " Load GFN2-xTB calculator"]
    pub fn xtb_loadGFN2xTB(
        arg1: xtb_TEnvironment,
        arg2: xtb_TMolecule,
        arg3: xtb_TCalculator,
        arg4: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " Load GFN-FF calculator"]
    pub fn xtb_loadGFNFF(
        arg1: xtb_TEnvironment,
        arg2: xtb_TMolecule,
        arg3: xtb_TCalculator,
        arg4: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " Add a solvation model to calculator (requires loaded parametrisation)"]
    pub fn xtb_setSolvent(
        arg1: xtb_TEnvironment,
        arg2: xtb_TCalculator,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut f64,
        arg6: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Unset the solvation model"]
    pub fn xtb_releaseSolvent(arg1: xtb_TEnvironment, arg2: xtb_TCalculator);
}
extern "C" {
    #[doc = " Add a external charge potential to calculator (only supported in GFN1/2-xTB)"]
    pub fn xtb_setExternalCharges(
        arg1: xtb_TEnvironment,
        arg2: xtb_TCalculator,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut f64,
        arg6: *mut f64,
    );
}
extern "C" {
    #[doc = " Unset the external charge potential"]
    pub fn xtb_releaseExternalCharges(arg1: xtb_TEnvironment, arg2: xtb_TCalculator);
}
extern "C" {
    #[doc = " Set numerical accuracy of calculator in the range of 1000 to 0.0001"]
    pub fn xtb_setAccuracy(arg1: xtb_TEnvironment, arg2: xtb_TCalculator, arg3: f64);
}
extern "C" {
    #[doc = " Set maximum number of iterations for self-consistent TB calculators"]
    pub fn xtb_setMaxIter(
        arg1: xtb_TEnvironment,
        arg2: xtb_TCalculator,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Set electronic temperature for level filling in tight binding calculators in K"]
    pub fn xtb_setElectronicTemp(arg1: xtb_TEnvironment, arg2: xtb_TCalculator, arg3: f64);
}
extern "C" {
    #[doc = " Perform singlepoint calculation"]
    pub fn xtb_singlepoint(
        arg1: xtb_TEnvironment,
        arg2: xtb_TMolecule,
        arg3: xtb_TCalculator,
        arg4: xtb_TResults,
    );
}
extern "C" {
    #[doc = " Create new singlepoint results object"]
    pub fn xtb_newResults() -> xtb_TResults;
}
extern "C" {
    #[doc = " Delete singlepoint results object"]
    pub fn xtb_delResults(arg1: *mut xtb_TResults);
}
extern "C" {
    #[doc = " Create copy from a singlepoint results object"]
    pub fn xtb_copyResults(arg1: xtb_TResults) -> xtb_TResults;
}
extern "C" {
    #[doc = " Query singlepoint results object for energy in Hartree"]
    pub fn xtb_getEnergy(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for gradient in Hartree / Bohr"]
    pub fn xtb_getGradient(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for pc gradient in Hartree / Bohr"]
    pub fn xtb_getPCGradient(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for virial in Hartree"]
    pub fn xtb_getVirial(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for dipole in e Bohr"]
    pub fn xtb_getDipole(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for partial charges in e"]
    pub fn xtb_getCharges(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for bond orders"]
    pub fn xtb_getBondOrders(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for the number of basis functions"]
    pub fn xtb_getNao(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Query singlepoint results object for orbital energies in Hartree [nao]"]
    pub fn xtb_getOrbitalEigenvalues(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for occupation numbers [nao]"]
    pub fn xtb_getOrbitalOccupations(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
extern "C" {
    #[doc = " Query singlepoint results object for orbital coefficients [nao][nao]"]
    pub fn xtb_getOrbitalCoefficients(arg1: xtb_TEnvironment, arg2: xtb_TResults, arg3: *mut f64);
}
